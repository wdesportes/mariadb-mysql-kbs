{
  "url": "http://kb-mirror.mariadb.com/kb/en/library/documentation/columns-storage-engines-and-plugins/storage-engines/myrocks/myrocks-system-variables/",
  "name": "myrocks-system-variables",
  "data": [
    {
      "id": "rocksdb_access_hint_on_compaction_start",
      "name": "rocksdb_access_hint_on_compaction_start",
      "type": "dboptions::access_hint_on_compaction_start for rocksdb",
      "cli": "--rocksdb-access-hint-on-compaction-start=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "1",
      "range": {
        "from": 0,
        "to": 3
      }
    },
    {
      "id": "rocksdb_advise_random_on_open",
      "name": "rocksdb_advise_random_on_open",
      "type": "dboptions::advise_random_on_open for rocksdb",
      "cli": "--rocksdb-advise-random-on-open={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_allow_concurrent_memtable_write",
      "name": "rocksdb_allow_concurrent_memtable_write",
      "type": "dboptions::allow_concurrent_memtable_write for rocksdb",
      "cli": "--rocksdb-allow-concurrent-memtable-write={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_allow_mmap_reads",
      "name": "rocksdb_allow_mmap_reads",
      "type": "dboptions::allow_mmap_reads for rocksdb",
      "cli": "--rocksdb-allow-mmap-reads={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_allow_mmap_writes",
      "name": "rocksdb_allow_mmap_writes",
      "type": "dboptions::allow_mmap_writes for rocksdb",
      "cli": "--rocksdb-allow-mmap-writes={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_background_sync",
      "name": "rocksdb_background_sync",
      "type": "turns on background syncs for rocksdb",
      "cli": "--rocksdb-background-sync={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_base_background_compactions",
      "name": "rocksdb_base_background_compactions",
      "type": "dboptions::base_background_compactions for rocksdb",
      "cli": "--rocksdb-base-background-compactions=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "1",
      "range": {
        "from": -1,
        "to": 64
      }
    },
    {
      "id": "rocksdb_blind_delete_primary_key",
      "name": "rocksdb_blind_delete_primary_key",
      "type": "deleting rows by primary key lookup, without reading rows (blind deletes). blind delete is disabled if the table has secondary key.",
      "cli": "--rocksdb-blind-delete-primary-key={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_block_cache_size",
      "name": "rocksdb_block_cache_size",
      "type": "block_cache size for rocksdb",
      "cli": "--rocksdb-block-cache-size=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "536870912",
      "range": {
        "from": 1024,
        "to": 9223372036854776000
      }
    },
    {
      "id": "rocksdb_block_restart_interval",
      "name": "rocksdb_block_restart_interval",
      "type": "blockbasedtableoptions::block_restart_interval for rocksdb",
      "cli": "--rocksdb-block-restart-interval=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "16",
      "range": {
        "from": 1,
        "to": 2147483647
      }
    },
    {
      "id": "rocksdb_block_size",
      "name": "rocksdb_block_size",
      "type": "blockbasedtableoptions::block_size for rocksdb",
      "cli": "--rocksdb-block-size=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "4096",
      "range": {
        "from": 1,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_block_size_deviation",
      "name": "rocksdb_block_size_deviation",
      "type": "blockbasedtableoptions::block_size_deviation for rocksdb",
      "cli": "--rocksdb-block-size-deviation=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "10",
      "range": {
        "from": 0,
        "to": 2147483647
      }
    },
    {
      "id": "rocksdb_bulk_load",
      "name": "rocksdb_bulk_load",
      "type": "use bulk-load mode for inserts. this disables unique_checks and enables rocksdb_commit_in_the_middle.",
      "cli": "--rocksdb-bulk-load={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_bulk_load_allow_unsorted",
      "name": "rocksdb_bulk_load_allow_unsorted",
      "type": "allow unsorted input during bulk-load. can be changed only when bulk load is disabled.",
      "cli": "--rocksdb-bulk-load_allow_unsorted={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_bulk_load_size",
      "name": "rocksdb_bulk_load_size",
      "type": "maximum number of records in a batch for bulk-load mode.",
      "cli": "--rocksdb-bulk-load-size=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "1000",
      "range": {
        "from": 1,
        "to": 1073741824
      }
    },
    {
      "id": "rocksdb_bytes_per_sync",
      "name": "rocksdb_bytes_per_sync",
      "type": "dboptions::bytes_per_sync for rocksdb.",
      "cli": "--rocksdb-bytes-per-sync=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_cache_index_and_filter_blocks",
      "name": "rocksdb_cache_index_and_filter_blocks",
      "type": "blockbasedtableoptions::cache_index_and_filter_blocks for rocksdb.",
      "cli": "--rocksdb-cache-index-and-filter_blocks={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_checksums_pct",
      "name": "rocksdb_checksums_pct",
      "type": "percentage of rows to be checksummed.",
      "cli": "--rocksdb-checksums-pct=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "100",
      "range": {
        "from": 0,
        "to": 100
      }
    },
    {
      "id": "rocksdb_collect_sst_properties",
      "name": "rocksdb_collect_sst_properties",
      "type": "enables collecting sst file properties on each flush.",
      "cli": "--rocksdb-collect-sst-properties={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_commit_in_the_middle",
      "name": "rocksdb_commit_in_the_middle",
      "type": "commit rows implicitly every rocksdb_bulk_load_size, on bulk load/insert, update and delete.",
      "cli": "--rocksdb-commit-in-the-middle={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_compact_cf",
      "name": "rocksdb_compact_cf",
      "type": "compact column family.",
      "cli": "--rocksdb-compact-cf=value",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "string"
    },
    {
      "id": "rocksdb_compaction_readahead_size",
      "name": "rocksdb_compaction_readahead_size",
      "type": "dboptions::compaction_readahead_size for rocksdb.",
      "cli": "--rocksdb-compaction-readahead-size=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_compaction_sequential_deletes",
      "name": "rocksdb_compaction_sequential_deletes",
      "type": "rocksdb will trigger compaction for the file if it has more than this number sequential deletes per window.",
      "cli": "--rocksdb-compaction-sequential-deletes=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 2000000
      }
    },
    {
      "id": "rocksdb_compaction_sequential_deletes_count_sd",
      "name": "rocksdb_compaction_sequential_deletes_count_sd",
      "type": "counting singledelete as rocksdb_compaction_sequential_deletes.",
      "cli": "--rocksdb-compaction-sequential-deletes-count-sd={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_compaction_sequential_deletes_file_size",
      "name": "rocksdb_compaction_sequential_deletes_file_size",
      "type": "minimum file size required for compaction_sequential_deletes.",
      "cli": "--rocksdb-compaction-sequential-deletes-file-size=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": -1,
        "to": 9223372036854776000
      }
    },
    {
      "id": "rocksdb_compaction_sequential_deletes_window",
      "name": "rocksdb_compaction_sequential_deletes_window",
      "type": "size of the window for counting rocksdb_compaction_sequential_deletes.",
      "cli": "--rocksdb-compaction-sequential-deletes-window=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 2000000
      }
    },
    {
      "id": "rocksdb_concurrent_prepare",
      "name": "rocksdb_concurrent_prepare",
      "type": "dboptions::concurrent_prepare for rocksdb.",
      "cli": "--rocksdb-coconcurrent-prepare={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "1"
    },
    {
      "id": "rocksdb_create_checkpoint",
      "name": "rocksdb_create_checkpoint",
      "type": "checkpoint directory.",
      "cli": "--rocksdb-create-checkpoint=value",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "string"
    },
    {
      "id": "rocksdb_create_if_missing",
      "name": "rocksdb_create_if_missing",
      "type": "dboptions::create_if_missing for rocksdb.",
      "cli": "--rocksdb-create-if-missing={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_create_missing_column_families",
      "name": "rocksdb_create_missing_column_families",
      "type": "dboptions::create_missing_column_families for rocksdb.",
      "cli": "--rocksdb-create-missing-column-families={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_datadir",
      "name": "rocksdb_datadir",
      "type": "rocksdb data directory.",
      "cli": "--rocksdb-datadir[=value]",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "string",
      "default": "./.rocksdb"
    },
    {
      "id": "rocksdb_db_write_buffer_size",
      "name": "rocksdb_db_write_buffer_size",
      "type": "dboptions::db_write_buffer_size for rocksdb.",
      "cli": "--rocksdb-db-write-buffer-size=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_deadlock_detect",
      "name": "rocksdb_deadlock_detect",
      "type": "enables deadlock detection.",
      "cli": "--rocksdb-deadlock-detect={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_deadlock_detect_depth",
      "name": "rocksdb_deadlock_detect_depth",
      "type": "number of transactions deadlock detection will traverse through before assuming deadlock.",
      "cli": "--rocksdb-deadlock-detect-depth=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "50",
      "range": {
        "from": 2,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_debug_optimizer_no_zero_cardinality",
      "name": "rocksdb_debug_optimizer_no_zero_cardinality",
      "type": "if cardinality is zero, override it with some value.",
      "cli": "--rocksdb-debug-optimizer-no-zero-cardinality={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_debug_ttl_ignore_pk",
      "name": "rocksdb_debug_ttl_ignore_pk",
      "type": "for debugging purposes only. if true, compaction filtering will not occur on pk ttl data. this variable is a no-op in non-debug builds.",
      "cli": "--rocksdb-debug-ttl-ignore-pk={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_debug_ttl_read_filter_ts",
      "name": "rocksdb_debug_ttl_read_filter_ts",
      "type": "for debugging purposes only.  overrides the ttl read filtering time to time + debug_ttl_read_filter_ts. a value of 0 denotes that the variable is not set. this variable is a no-op in non-debug builds.",
      "cli": "--rocksdb-debug-ttl-read-filter-ts=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": -3600,
        "to": 3600
      }
    },
    {
      "id": "rocksdb_debug_ttl_rec_ts",
      "name": "rocksdb_debug_ttl_rec_ts",
      "type": "for debugging purposes only.  overrides the ttl of records to now() + debug_ttl_rec_ts. the value can be +/- to simulate a record inserted in the past vs a record inserted in the 'future'. a value of 0 denotes that the variable is not set. this variable is a no-op in non-debug builds.",
      "cli": "--rocksdb-debug-ttl-read-filter-ts=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": -3600,
        "to": 3600
      }
    },
    {
      "id": "rocksdb_debug_ttl_snapshot_ts",
      "name": "rocksdb_debug_ttl_snapshot_ts",
      "type": "for debugging purposes only. sets the snapshot during compaction to now() + debug_set_ttl_snapshot_ts. the value can be positive or negative to simulate a snapshot in the past vs a snapshot created in the 'future'. a value of 0 denotes that the variable is not set. this variable is a no-op in non-debug builds.",
      "cli": "--rocksdb-debug-ttl-snapshot-ts=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": -3600,
        "to": 3600
      }
    },
    {
      "id": "rocksdb_default_cf_options",
      "name": "rocksdb_default_cf_options",
      "type": "default cf options for rocksdb.",
      "cli": "--rocksdb-default-cf-options=value",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "string"
    },
    {
      "id": "rocksdb_delayed_write_rate",
      "name": "rocksdb_delayed_write_rate",
      "type": "dboptions::delayed_write_rate.",
      "cli": "--rocksdb-delayed-write-rate=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "16777216",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_delete_obsolete_files_period_micros",
      "name": "rocksdb_delete_obsolete_files_period_micros",
      "type": "dboptions::delete_obsolete_files_period_micros for rocksdb.",
      "cli": "--rocksdb-delete-obsolete-files-period-micros=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "21600000000",
      "range": {
        "from": 0,
        "to": 9223372036854776000
      }
    },
    {
      "id": "rocksdb_enable_2pc",
      "name": "rocksdb_enable_2pc",
      "type": "enable two phase commit for myrocks. when set, myrocks will keep its data consistent with the",
      "cli": "--rocksdb-enable-2pc={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_enable_bulk_load_api",
      "name": "rocksdb_enable_bulk_load_api",
      "type": "enables using sstfilewriter for bulk loading.",
      "cli": "--rocksdb-enable-bulk-load-api={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_enable_thread_tracking",
      "name": "rocksdb_enable_thread_tracking",
      "type": "dboptions::enable_thread_tracking for rocksdb.",
      "cli": "--rocksdb-enable-thread-tracking={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_enable_ttl",
      "name": "rocksdb_enable_ttl",
      "type": "enable expired ttl records to be dropped during compaction.",
      "cli": "--rocksdb-enable-ttl={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_enable_ttl_read_filtering",
      "name": "rocksdb_enable_ttl_read_filtering",
      "type": "for tables with ttl, expired records are skipped/filtered out during processing and in query results. disabling this will allow these records to be seen, but as a result rows may disappear in the middle of transactions as they are dropped during compaction. use with caution.",
      "cli": "--rocksdb-enable-ttl-read-filtering={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_enable_write_thread_adaptive_yield",
      "name": "rocksdb_enable_write_thread_adaptive_yield",
      "type": "dboptions::enable_write_thread_adaptive_yield for rocksdb.",
      "cli": "--rocksdb-enable-write-thread-adaptive-yield={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_error_if_exists",
      "name": "rocksdb_error_if_exists",
      "type": "dboptions::error_if_exists for rocksdbb.",
      "cli": "--rocksdb-error-if-exists={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_flush_log_at_trx_commit",
      "name": "rocksdb_flush_log_at_trx_commit",
      "type": "sync on transaction commit. similar to",
      "cli": "--rocksdb-flush-log-at-trx-commit=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "1",
      "range": {
        "from": 0,
        "to": 2
      }
    },
    {
      "id": "rocksdb_flush_memtable_on_analyze",
      "name": "rocksdb_flush_memtable_on_analyze",
      "type": "forces memtable flush on analzye table to get accurate cardinality.",
      "cli": "--rocksdb-flush-memtable-on-analyze={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_force_compute_memtable_stats",
      "name": "rocksdb_force_compute_memtable_stats",
      "type": "force to always compute memtable stats.",
      "cli": "--rocksdb-force-compute-memtable-stats={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_force_compute_memtable_stats_cachetime",
      "name": "rocksdb_force_compute_memtable_stats_cachetime",
      "type": "time in usecs to cache memtable estimates.",
      "cli": "--rocksdb-force-compute-memtable-stats-cachetime=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "60000000",
      "range": {
        "from": 0,
        "to": 2147483647
      }
    },
    {
      "id": "rocksdb_force_flush_memtable_and_lzero_now",
      "name": "rocksdb_force_flush_memtable_and_lzero_now",
      "type": "acts similar to force_flush_memtable_now, but also compacts all l0 files.",
      "cli": "--rocksdb-force-flush-memtable-and-lzero-now={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_force_flush_memtable_now",
      "name": "rocksdb_force_flush_memtable_now",
      "type": "forces memstore flush which may block all write requests so be careful.",
      "cli": "--rocksdb-force-flush-memtable-now={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_force_index_records_in_range",
      "name": "rocksdb_force_index_records_in_range",
      "type": "used to override the result of records_in_range() when force index is used.",
      "cli": "--rocksdb-force-index-records-in-range=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "1",
      "range": {
        "from": 0,
        "to": 2147483647
      }
    },
    {
      "id": "rocksdb_git_hash",
      "name": "rocksdb_git_hash",
      "type": "git revision of the rocksdb library used by myrocks.",
      "cli": "--rocksdb-git-hash=value=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "string"
    },
    {
      "id": "rocksdb_hash_index_allow_collision",
      "name": "rocksdb_hash_index_allow_collision",
      "type": "blockbasedtableoptions::hash_index_allow_collision for rocksdb.",
      "cli": "--rocksdb-hash-index-allow-collision={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_index_type",
      "name": "rocksdb_index_type",
      "type": "blockbasedtableoptions::index_type for rocksdb.",
      "cli": "--rocksdb-index-type=value",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "enum",
      "default": "kBinarySearch",
      "validValues": [
        "kBinarySearch",
        "kHashSearch"
      ]
    },
    {
      "id": "rocksdb_info_log_level",
      "name": "rocksdb_info_log_level",
      "type": "filter level for info logs to be written mysqld error log. valid values include 'debug_level', 'info_level', 'warn_level''error_level' and 'fatal_level'.",
      "cli": "--rocksdb-info-log-level=value",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "enum",
      "default": "error_level",
      "validValues": [
        "error_level",
        "debug_level",
        "info_level",
        "warn_level",
        "fatal_level"
      ]
    },
    {
      "id": "rocksdb_io_write_timeout",
      "name": "rocksdb_io_write_timeout",
      "type": "timeout for experimental i/o watchdog.",
      "cli": "--rocksdb-io-write-timeout=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "validValues": [
        "0",
        "4294967295"
      ]
    },
    {
      "id": "rocksdb_is_fd_close_on_exec",
      "name": "rocksdb_is_fd_close_on_exec",
      "type": "dboptions::is_fd_close_on_exec for rocksdb.",
      "cli": "--rocksdb-is-fd-close-on-exec={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_keep_log_file_num",
      "name": "rocksdb_keep_log_file_num",
      "type": "dboptions::keep_log_file_num for rocksdb.",
      "cli": "--rocksdb-keep-log-file-num=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "1000",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_large_prefix",
      "name": "rocksdb_large_prefix",
      "type": "support large index prefix length of 3072 bytes. if off, the maximum index prefix length is 767.",
      "cli": "--rocksdb-large_prefix={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_lock_scanned_rows",
      "name": "rocksdb_lock_scanned_rows",
      "type": "take and hold locks on rows that are scanned but not updated.",
      "cli": "--rocksdb-lock-scanned-rows={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_lock_wait_timeout",
      "name": "rocksdb_lock_wait_timeout",
      "type": "number of seconds to wait for lock.",
      "cli": "--rocksdb-lock-wait-timeout=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "1",
      "range": {
        "from": 1,
        "to": 1073741824
      }
    },
    {
      "id": "rocksdb_log_file_time_to_roll",
      "name": "rocksdb_log_file_time_to_roll",
      "type": "dboptions::log_file_time_to_roll for rocksdb.",
      "cli": "--rocksdb-log-file-time-to_roll=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_manifest_preallocation_size",
      "name": "rocksdb_manifest_preallocation_size",
      "type": "dboptions::manifest_preallocation_size for rocksdb.",
      "cli": "--rocksdb-manifest-preallocation-size=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_manual_wal_flush",
      "name": "rocksdb_manual_wal_flush",
      "type": "dboptions::manual_wal_flush for rocksdb.",
      "cli": "--rocksdb-manual-wal-flush={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_master_skip_tx_api",
      "name": "rocksdb_master_skip_tx_api",
      "type": "skipping holding any lock on row access. not effective on slave.",
      "cli": "--rocksdb-master-skip-tx-api={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_max_background_compactions",
      "name": "rocksdb_max_background_compactions",
      "type": "dboptions::max_background_compactions for rocksdb.",
      "cli": "--rocksdb-max-background-compactions=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "1",
      "range": {
        "from": 1,
        "to": 64
      }
    },
    {
      "id": "rocksdb_max_background_flushes",
      "name": "rocksdb_max_background_flushes",
      "type": "dboptions::max_background_flushes for rocksdb.",
      "cli": "--rocksdb-max-background-flushes=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "1",
      "range": {
        "from": 1,
        "to": 64
      }
    },
    {
      "id": "rocksdb_max_background_jobs",
      "name": "rocksdb_max_background_jobs",
      "type": "dboptions::max_background_jobs for rocksdb.",
      "cli": "--rocksdb-max-background-jobs=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "2",
      "range": {
        "from": -1,
        "to": 64
      }
    },
    {
      "id": "rocksdb_max_latest_deadlocks",
      "name": "rocksdb_max_latest_deadlocks",
      "type": "maximum number of recent deadlocks to store.",
      "cli": "--rocksdb-max-latest-deadlocks=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "5",
      "range": {
        "from": 0,
        "to": 4294967295
      }
    },
    {
      "id": "rocksdb_max_log_file_size",
      "name": "rocksdb_max_log_file_size",
      "type": "dboptions::max_log_file_size for rocksdb.",
      "cli": "--rocksdb-max-log-file-size=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_max_manifest_file_size",
      "name": "rocksdb_max_manifest_file_size",
      "type": "dboptions::max_manifest_file_size for rocksdb.",
      "cli": "--rocksdb-manifest-log-file-size=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "18446744073709551615",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_max_open_files",
      "name": "rocksdb_max_open_files",
      "type": "dboptions::max_open_files for rocksdb.",
      "cli": "--rocksdb-max-open-files=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "-1",
      "range": {
        "from": -1,
        "to": 2147483647
      }
    },
    {
      "id": "rocksdb_max_row_locks",
      "name": "rocksdb_max_row_locks",
      "type": "maximum number of locks a transaction can have.",
      "cli": "--rocksdb-max-row-locks=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "1073741824",
      "range": {
        "from": 1,
        "to": 1073741824
      }
    },
    {
      "id": "rocksdb_max_subcompactions",
      "name": "rocksdb_max_subcompactions",
      "type": "dboptions::max_subcompactions for rocksdb.",
      "cli": "--rocksdb-max-subcompactions=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "1",
      "range": {
        "from": 1,
        "to": 64
      }
    },
    {
      "id": "rocksdb_max_total_wal_size",
      "name": "rocksdb_max_total_wal_size",
      "type": "dboptions::max_total_wal_size for rocksdb.",
      "cli": "--rocksdb-max-total-wal-size=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 9223372036854776000
      }
    },
    {
      "id": "rocksdb_merge_buf_size",
      "name": "rocksdb_merge_buf_size",
      "type": "size to allocate for merge sort buffers written out to disk during inplace index creation.",
      "cli": "--rocksdb-merge-buf-size=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "67108864",
      "range": {
        "from": 100,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_merge_combine_read_size",
      "name": "rocksdb_merge_combine_read_size",
      "type": "size that we have to work with during combine (reading from disk) phase of external sort during fast index creation.",
      "cli": "--rocksdb-merge-combine-read-size=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "1073741824",
      "range": {
        "from": 100,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_merge_tmp_file_removal_delay_ms",
      "name": "rocksdb_merge_tmp_file_removal_delay_ms",
      "type": "fast index creation creates a large tmp file on disk during index creation.  removing this large file all at once when index creation is complete can cause trim stalls on flash. this variable specifies a duration to sleep (in milliseconds) between calling chsize() to truncate the file in chunks. the chunk size is  the same as merge_buf_size.",
      "cli": "--rocksdb-merge-tmp-file-removal-delay-ms=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_new_table_reader_for_compaction_inputs",
      "name": "rocksdb_new_table_reader_for_compaction_inputs",
      "type": "dboptions::new_table_reader_for_compaction_inputs for rocksdb.",
      "cli": "--rocksdb-new-table-reader-for-compaction-inputs={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_no_block_cache",
      "name": "rocksdb_no_block_cache",
      "type": "blockbasedtableoptions::no_block_cache for rocksdb.",
      "cli": "--rocksdb-no-block-cache={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_override_cf_options",
      "name": "rocksdb_override_cf_options",
      "type": "option overrides per cf for rocksdb.",
      "cli": "--rocksdb-override-cf-options=value",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "string"
    },
    {
      "id": "rocksdb_paranoid_checks",
      "name": "rocksdb_paranoid_checks",
      "type": "dboptions::paranoid_checks for rocksdb.",
      "cli": "--rocksdb-paranoid-checks={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_pause_background_work",
      "name": "rocksdb_pause_background_work",
      "type": "disable all rocksdb background operations.",
      "cli": "--rocksdb-pause-background-work={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_perf_context_level",
      "name": "rocksdb_perf_context_level",
      "type": "perf context level for rocksdb internal timer stat collection.",
      "cli": "--rocksdb-perf-context-level=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 4
      }
    },
    {
      "id": "rocksdb_persistent_cache_path",
      "name": "rocksdb_persistent_cache_path",
      "type": "path for blockbasedtableoptions::persistent_cache for rocksdb.",
      "cli": "--rocksdb-persistent-cache-path=value",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "string"
    },
    {
      "id": "rocksdb_persistent_cache_size_mb",
      "name": "rocksdb_persistent_cache_size_mb",
      "type": "size of cache in mb for blockbasedtableoptions::persistent_cache for rocksdb.",
      "cli": "--rocksdb-persistent-cache-size-mb=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_pin_l0_filter_and_index_blocks_in_cache",
      "name": "rocksdb_pin_l0_filter_and_index_blocks_in_cache",
      "type": "pin_l0_filter_and_index_blocks_in_cache for rocksdb.",
      "cli": "--rocksdb-pin-l0-filter-and-index-blocks-in-cache={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_print_snapshot_conflict_queries",
      "name": "rocksdb_print_snapshot_conflict_queries",
      "type": "logging queries that got snapshot conflict errors into *.err log.",
      "cli": "--rocksdb-print-snapshot-conflict-queries={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_rate_limiter_bytes_per_sec",
      "name": "rocksdb_rate_limiter_bytes_per_sec",
      "type": "dboptions::rate_limiter bytes_per_sec for rocksdb.",
      "cli": "--rocksdb-rate-limiter-bytes-per-sec=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 9223372036854776000
      }
    },
    {
      "id": "rocksdb_read_free_rpl_tables",
      "name": "rocksdb_read_free_rpl_tables",
      "type": "list of tables that will use read-free replication on the slave (i.e. not lookup a row during replication).",
      "cli": "--rocksdb-read-free-rpl-tables=value",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "string"
    },
    {
      "id": "rocksdb_records_in_range",
      "name": "rocksdb_records_in_range",
      "type": "used to override the result of records_in_range(). set to a positive number to override.",
      "cli": "--rocksdb-records-in-range=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 2147483647
      }
    },
    {
      "id": "rocksdb_reset_stats",
      "name": "rocksdb_reset_stats",
      "type": "reset the rocksdb internal statistics without restarting the db.",
      "cli": "--rocksdb-reset-stats={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_seconds_between_stat_computes",
      "name": "rocksdb_seconds_between_stat_computes",
      "type": "sets a number of seconds to wait between optimizer stats recomputation. only changed indexes will be refreshed.",
      "cli": "--rocksdb-seconds-between-stat-computes=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "3600",
      "range": {
        "from": 0,
        "to": 4294967295
      }
    },
    {
      "id": "rocksdb_signal_drop_index_thread",
      "name": "rocksdb_signal_drop_index_thread",
      "type": "wake up drop index thread.",
      "cli": "--rocksdb-signal-drop-index-thread={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_sim_cache_size",
      "name": "rocksdb_sim_cache_size",
      "type": "simulated cache size for rocksdb.",
      "cli": "--rocksdb-sim-cache-size=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 9223372036854776000
      }
    },
    {
      "id": "rocksdb_skip_bloom_filter_on_read",
      "name": "rocksdb_skip_bloom_filter_on_read",
      "type": "skip using bloom filter for reads.",
      "cli": "--rocksdb-skip-bloom-filter-on_read={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_skip_fill_cache",
      "name": "rocksdb_skip_fill_cache",
      "type": "skip filling block cache on read requests.",
      "cli": "--rocksdb-skip-fill-cache={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_skip_unique_check_tables",
      "name": "rocksdb_skip_unique_check_tables",
      "type": "skip unique constraint checking for the specified tables.",
      "cli": "--rocksdb-skip-unique-check-tables=value",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "string",
      "default": ".*"
    },
    {
      "id": "rocksdb_sst_mgr_rate_bytes_per_sec",
      "name": "rocksdb_sst_mgr_rate_bytes_per_sec",
      "type": "dboptions::sst_file_manager rate_bytes_per_sec for rocksdb",
      "cli": "--rocksdb-sst-mgr-rate-bytes-per-sec=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_stats_dump_period_sec",
      "name": "rocksdb_stats_dump_period_sec",
      "type": "dboptions::stats_dump_period_sec for rocksdb.",
      "cli": "--rocksdb-stats-dump-period-sec=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "600",
      "range": {
        "from": 0,
        "to": 2147483647
      }
    },
    {
      "id": "rocksdb_store_row_debug_checksums",
      "name": "rocksdb_store_row_debug_checksums",
      "type": "include checksums when writing index/table records.",
      "cli": "--rocksdb-store-row-debug-checksums={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_strict_collation_check",
      "name": "rocksdb_strict_collation_check",
      "type": "enforce case sensitive collation for myrocks indexes.",
      "cli": "--rocksdb-strict-collation-check={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_strict_collation_exceptions",
      "name": "rocksdb_strict_collation_exceptions",
      "type": "list of tables (using regex) that are excluded from the case sensitive collation enforcement.",
      "cli": "--rocksdb-strict-collation-exceptions=value",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "string"
    },
    {
      "id": "rocksdb_supported_compression_types",
      "name": "rocksdb_supported_compression_types",
      "type": "compression algorithms supported by rocksdb.",
      "cli": "--rocksdb-supported-compression-types=value",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "string",
      "default": "Snappy,Zlib"
    },
    {
      "id": "rocksdb_table_cache_numshardbits",
      "name": "rocksdb_table_cache_numshardbits",
      "type": "dboptions::table_cache_numshardbits for rocksdb.",
      "cli": "--rocksdb-table-cache-numshardbits=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "6",
      "range": {
        "from": 0,
        "to": 2147483647
      }
    },
    {
      "id": "rocksdb_table_stats_sampling_pct",
      "name": "rocksdb_table_stats_sampling_pct",
      "type": "percentage of entries to sample when collecting statistics about table properties. specify either 0 to sample everything or percentage [1..100]. by default 10% of entries are sampled.",
      "cli": "--rocksdb-table-stats-sampling-pct=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "10",
      "range": {
        "from": 0,
        "to": 100
      }
    },
    {
      "id": "rocksdb_tmpdir",
      "name": "rocksdb_tmpdir",
      "type": "directory for temporary files during ddl operations.",
      "cli": "--rocksdb-tmpdir[=value]",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "string"
    },
    {
      "id": "rocksdb_trace_sst_api",
      "name": "rocksdb_trace_sst_api",
      "type": "generate trace output in the log for each call to the sstfilewriter.",
      "cli": "--rocksdb-trace-sst-api={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_unsafe_for_binlog",
      "name": "rocksdb_unsafe_for_binlog",
      "type": "allowing statement based binary logging which may break consistency.",
      "cli": "--rocksdb-unsafe-for-binlog={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_update_cf_options",
      "name": "rocksdb_update_cf_options",
      "type": "option updates per column family for rocksdb.",
      "cli": "--rocksdb-update-cf-options=value",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "varchar"
    },
    {
      "id": "rocksdb_use_adaptive_mutex",
      "name": "rocksdb_use_adaptive_mutex",
      "type": "dboptions::use_adaptive_mutex for rocksdb.",
      "cli": "--rocksdb-use-adaptive-mutex={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_use_clock_cache",
      "name": "rocksdb_use_clock_cache",
      "type": "use clockcache instead of default lrucache for rocksdb.",
      "cli": "--rocksdb-use-clock-cache={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_use_direct_io_for_flush_and_compaction",
      "name": "rocksdb_use_direct_io_for_flush_and_compaction",
      "type": "dboptions::use_direct_io_for_flush_and_compaction for rocksdb.",
      "cli": "--rocksdb-use-direct-io-for-flush-and-compaction={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_use_direct_reads",
      "name": "rocksdb_use_direct_reads",
      "type": "dboptions::use_direct_reads for rocksdb.",
      "cli": "--rocksdb-use-direct-reads={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_use_fsync",
      "name": "rocksdb_use_fsync",
      "type": "dboptions::use_fsync for rocksdb.",
      "cli": "--rocksdb-use-fsync={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_validate_tables",
      "name": "rocksdb_validate_tables",
      "type": "verify all .frm files match all rocksdb tables (0 means no verification, 1 means verify and fail on error, and 2 means verify but continue.",
      "cli": "--rocksdb-validate-tables=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "1",
      "range": {
        "from": 0,
        "to": 2
      }
    },
    {
      "id": "rocksdb_verify_row_debug_checksums",
      "name": "rocksdb_verify_row_debug_checksums",
      "type": "verify checksums when reading index/table records.",
      "cli": "--rocksdb-verify-row-debug-checksums={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_wal_bytes_per_sync",
      "name": "rocksdb_wal_bytes_per_sync",
      "type": "dboptions::wal_bytes_per_sync for rocksdb.",
      "cli": "--rocksdb-wal-bytes-per-sync=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_wal_dir",
      "name": "rocksdb_wal_dir",
      "type": "dboptions::wal_dir for rocksdb.",
      "cli": "--rocksdb-wal-dir=value",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "string"
    },
    {
      "id": "rocksdb_wal_recovery_mode",
      "name": "rocksdb_wal_recovery_mode",
      "type": "dboptions::wal_recovery_mode for rocksdb. default is kabsoluteconsistency.",
      "cli": "--rocksdb-wal-recovery-mode=#",
      "scope": [
        "global"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "1",
      "range": {
        "from": 0,
        "to": 3
      }
    },
    {
      "id": "rocksdb_wal_size_limit_mb",
      "name": "rocksdb_wal_size_limit_mb",
      "type": "dboptions::wal_size_limit_mb for rocksdb.",
      "cli": "--rocksdb-wal-size-limit-mb=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 9223372036854776000
      }
    },
    {
      "id": "rocksdb_wal_ttl_seconds",
      "name": "rocksdb_wal_ttl_seconds",
      "type": "dboptions::wal_ttl_seconds for rocksdb.",
      "cli": "--rocksdb-wal-ttl-seconds=#",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 9223372036854776000
      }
    },
    {
      "id": "rocksdb_whole_key_filtering",
      "name": "rocksdb_whole_key_filtering",
      "type": "blockbasedtableoptions::whole_key_filtering for rocksdb.",
      "cli": "--rocksdb-whole-key-filtering={0|1}",
      "scope": [
        "global"
      ],
      "dynamic": false,
      "dataType": "boolean",
      "default": "ON"
    },
    {
      "id": "rocksdb_write_batch_max_bytes",
      "name": "rocksdb_write_batch_max_bytes",
      "type": "maximum size of write batch in bytes. 0 means no limit.",
      "cli": "--rocksdb-write-batch-max-bytes=#",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "numeric",
      "default": "0",
      "range": {
        "from": 0,
        "to": 18446744073709552000
      }
    },
    {
      "id": "rocksdb_write_disable_wal",
      "name": "rocksdb_write_disable_wal",
      "type": "writeoptions::disablewal for rocksdb.",
      "cli": "--rocksdb-write-disable-wal={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    },
    {
      "id": "rocksdb_write_ignore_missing_column_families",
      "name": "rocksdb_write_ignore_missing_column_families",
      "type": "writeoptions::ignore_missing_column_families for rocksdb.",
      "cli": "--rocksdb-write-ignore-missing-column-familiesl={0|1}",
      "scope": [
        "global",
        "session"
      ],
      "dynamic": true,
      "dataType": "boolean",
      "default": "OFF"
    }
  ]
}